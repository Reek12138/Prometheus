<launch>
	<!-- 启动PX4中的SITL功能 -->
	<!-- 这里的环境变量将传递到rcS启动脚本中-->
	<!-- 模型选择 -->
	<env name="PX4_SIM_MODEL" value="solo" />
	<!-- 估计器参数选择 -->
    <env name="PX4_ESTIMATOR" value="ekf2_vision" />
	<!-- 仿真速度因子 1.0代表与真实时间同步，大于1加快仿真速度，小于1则减慢 （电脑性能较差，可选择减小该参数）-->
	<env name="PX4_SIM_SPEED_FACTOR" value="1.0" />
	
	
	<!-- PX4 configs -->
    <arg name="interactive" default="true"/>
    <!-- PX4 SITL -->
	<arg unless="$(arg interactive)" name="px4_command_arg1" value="-d"/>
    <arg     if="$(arg interactive)" name="px4_command_arg1" value=""/>
    <!-- <node name="sitl" pkg="px4" type="px4" output="screen" args="$(find px4)/ROMFS/px4fmu_common -s etc/init.d-posix/rcS $(arg px4_command_arg1)" required="true"/> -->
	<node name="sitl" pkg="px4" type="px4" output="screen" args="$(find px4)/ROMFS/px4fmu_common -s etc/init.d-posix/rcS $(arg px4_command_arg1)"/>

	<!-- 启动Gazebo -->
	<!-- Gazebo configs -->
    <arg name="gui" default="true"/>
	<arg name="world" default="$(find prometheus_gazebo)/worlds/wall_num.world"/>
    <!-- Gazebo sim -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world_name" value="$(arg world)"/>
    </include>

	<!-- Spawn vehicle model -->
	<!-- https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_ros/scripts/spawn_model -->
    <arg name="x" default="1.0"/>
    <arg name="y" default="1.0"/>
    <arg name="z" default="0.1"/>
	<arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0.0"/>
	<arg name="sdf" default="$(find prometheus_gazebo)/models/P300_2Dlidar/P300_2Dlidar.sdf"/>
	<arg name="model" default="P300_2Dlidar"/>
	<node name="$(anon vehicle_spawn)" pkg="gazebo_ros" type="spawn_model" output="screen" 
		args="-sdf -file $(arg sdf) -model $(arg model) -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)">
	</node>

	<!-- 启动MAVROS -->
	<node pkg="mavros" type="mavros_node" name="mavros" output="screen">
		<param name="fcu_url" value="udp://:14540@localhost:14557" />
		<param name="gcs_url" value="" />
		<param name="target_system_id" value="1" />
		<param name="target_component_id" value="1" />
		<rosparam command="load" file="$(find prometheus_gazebo)/config/px4_pluginlists.yaml" />
		<rosparam command="load" file="$(find prometheus_gazebo)/config/px4_config.yaml" />
	</node>

	<!-- TF transform -->
	<!-- TF for world-->
	<!-- 统一mavros发布的map系与world系 -->
	<!-- <node pkg="tf" type="static_transform_publisher" name="tf_world_map"
		args="$(arg x) $(arg y) 0 0 0 0 world map 100"/> -->

        <!-- TF for 2D lidar-->
        <!-- 2Dlidar_link是2D激光雷达坐标系 -->
        <!-- 机体系与2Dlidar_link的坐标转换关系见 P300_2Dlidar.sdf -->
  	<node pkg="tf" type="static_transform_publisher" name="tf_2Dlidar"
          	args="0 0 0.2 0 0 0 base_link lidar_link 100"/>


	<!-- 启动rviz,设为false可关闭 -->
	<arg name="visualization" default="true"/>
	<group if="$(arg visualization)">
        <node type="rviz" name="rviz" pkg="rviz" args="-d $(find prometheus_gazebo)/config/rviz_cartographer_2d.rviz" />
        <!-- obstacle.world 真实点云 -->
        <node pkg="prometheus_slam" type="pc2_publisher_node" name="pc2_publisher_node" output="screen">	
            <param name="pcd_path" type="string" value="$(find prometheus_gazebo)/maps/obstacle.pcd" />
	    </node>
    </group>

    <param name="/use_sim_time" value="true" />

    <node name="cartographer_node" pkg="cartographer_ros"
        type="cartographer_node" args="
            -configuration_directory $(find prometheus_gazebo)/config/config_cartographer
            -configuration_basename rplidar_s1.lua"
        output="screen">
        <remap from="scan" to="/prometheus/sensors/2Dlidar_scan" />
        <remap from="imu" to="/mavros/imu/data_raw" />
    </node>
    
    <!-- imu_link -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="tf_imu" 
            args="0 0 0 0 0 0 base_link imu_link 100"/> -->

    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
        type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
	<!-- 启动Prometheus代码 -->
	<!-- run the px4_pos_estimator.cpp -->
	<arg name="input_source" default="2"/>
	<node pkg="prometheus_control" type="px4_pos_estimator" name="px4_pos_estimator" output="screen">
		<!-- 定位数据输入源 0 for vicon， 1 for 激光SLAM, 2 for gazebo ground truth, 3 for T265 -->
		<param name="input_source" value="$(arg input_source)" />
		<param name="offset_x" value="$(arg x)" />
		<param name="offset_y" value="$(arg y)" />
		<param name="offset_z" value="$(arg z)" />
	</node>
	
	<!-- run the px4_pos_controller.cpp -->
	<node pkg="prometheus_control" type="px4_pos_controller" name="px4_pos_controller" output="screen">
		<rosparam command="load" file="$(find prometheus_control)/config/px4_pos_controller.yaml"/>
	</node>
	
	<!-- run the ground_station.cpp -->
	<node pkg="prometheus_control" type="ground_station" name="ground_station" output="screen" launch-prefix="gnome-terminal --tab --">	
	</node>


	<!-- run the terminal_control.cpp -->
	<node pkg="prometheus_control" type="terminal_control" name="terminal_control" output="screen" launch-prefix="gnome-terminal --">	
		<rosparam command="load" file="$(find prometheus_control)/config/terminal_control.yaml" />
	</node>	
</launch>

