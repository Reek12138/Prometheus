<launch>
  <!-- ========== STEP [1] 雷达数据处理 ========== -->
  <node pkg="testpkg" type="laser2pcl_node" name="laser2pcl_node"/>
  <!-- ========== ========== ========== -->

  <!-- ========== STEP [2] 启动 ego-planner ========== -->
  <!-- size of map, change the size inflate x, y, z according to your application -->
  <arg name="map_size_x" value="100.0"/>
  <arg name="map_size_y" value="100.0"/>
  <arg name="map_size_z" value="10.0"/>

  <arg name="max_vel" value="0.2" />
  <arg name="max_acc" value="0.3" />
  <arg name="max_jer" value="0.5" />

  <arg name="drone_id" value="0"/>

  <!-- topic of your odometry such as VIO or LIO -->
  <arg name="odom_topic" value="/prometheus/drone_odom"/>
  <arg name="cloud_topic" value="/prometheus/sensors/pcl2_map"/>

  <!-- main algorithm params -->
  <include file="$(find testpkg)/launch/include/advanced_param.xml">
    <arg name="drone_id" value="$(arg drone_id)"/>
    <arg name="map_size_x_" value="$(arg map_size_x)"/>
    <arg name="map_size_y_" value="$(arg map_size_y)"/>
    <arg name="map_size_z_" value="$(arg map_size_z)"/>
    <arg name="odometry_topic" value="$(arg odom_topic)"/>
    <!-- camera pose: transform of camera frame in the world frame -->
    <!-- depth topic: depth image, 640x480 by default -->
    <!-- don't set cloud_topic if you already set these ones! -->
    <arg name="camera_pose_topic" value="pcl_render_node/camera_pose"/>
    <arg name="depth_topic" value="pcl_render_node/depth"/>
    <!-- topic of point cloud measurement, such as from LIDAR  -->
    <!-- don't set camera pose and depth, if you already set this one! -->
    <arg name="cloud_topic" value="$(arg cloud_topic)"/>
    <!-- intrinsic params of the depth camera -->
    <arg name="cx" value="321.04638671875"/>
    <arg name="cy" value="243.44969177246094"/>
    <arg name="fx" value="387.229248046875"/>
    <arg name="fy" value="387.229248046875"/>
    <!-- maximum velocity, acceleration and jerk the drone will reach -->
    <arg name="max_vel" value="$(arg max_vel)" />
    <arg name="max_acc" value="$(arg max_acc)" />
    <arg name="max_jer" value="$(arg max_jer)" />
    <!--always set to 1.5 times grater than sensing horizen-->
    <arg name="planning_horizon" value="7.5" />
    <arg name="use_multitopology_trajs" value="false" />
    <!-- 1: use 2D Nav Goal to select goal  -->
    <!-- 2: use global waypoints below  -->
    <arg name="flight_type" value="1" />
    <!-- global waypoints -->
    <!-- It generates a piecewise min-snap traj passing all waypoints -->
    <arg name="point_num" value="1" />
    <arg name="point0_x" value="0.0" />
    <arg name="point0_y" value="0.0" />
    <arg name="point0_z" value="0.0" />
    <arg name="point1_x" value="0.0" />
    <arg name="point1_y" value="0.0" />
    <arg name="point1_z" value="0.0" />
    <arg name="point2_x" value="0.0" />
    <arg name="point2_y" value="0.0" />
    <arg name="point2_z" value="0.0" />
    <arg name="point3_x" value="0.0" />
    <arg name="point3_y" value="0.0" />
    <arg name="point3_z" value="0.0" />
    <arg name="point4_x" value="0.0" />
    <arg name="point4_y" value="0.0" />
    <arg name="point4_z" value="0.0" />
  </include>

  <!-- trajectory server -->
  <node pkg="ego_planner" name="drone_$(arg drone_id)_traj_server" type="traj_server" output="screen">
    <remap from="position_cmd" to="drone_$(arg drone_id)_planning/pos_cmd"/>
    <remap from="~planning/trajectory" to="drone_$(arg drone_id)_planning/trajectory"/>
    <param name="traj_server/time_forward" value="1.0" type="double"/>
  </node>
  <!-- ========== ========== ========== -->

  <!-- ========== STEP [3] 启动 指令终端 ========== -->
  <node pkg="testpkg" type="ego_terminal_node" name="ego_terminal_node" output="screen" launch-prefix="gnome-terminal --">	
	</node>	
  <!-- ========== ========== ========== -->

</launch>
